# -*- coding: utf-8 -*-
"""Minor project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v1y8y0faliuqptUcyIO9l02JOVtEWadR
"""

import numpy as np
import pandas as pd
data=pd.read_csv(r'/content/hypothyroid.csv')
data.head()

data.info()

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder
enc=LabelEncoder()
for x in data.columns:
    data[x]=enc.fit_transform(data[x])
data.info()

data.head()

plt.figure(figsize=(9,6))
sns.histplot(x='age',data=data,color='blue')
plt.title("Distribution of Positive Class Based on Age",{'fontsize':20});

plt.figure(figsize=(8,8))
plt.pie(x=data.sick.value_counts(),
        labels=['Sick','Well'],
        startangle = 20,
        colors=['springgreen','red'],
        autopct='%.2f',
        explode=[0,0.2]
       );
plt.legend();

data=data.drop_duplicates()
data.info()

data.describe()

data['age']=(data['age']-data['age'].min())/(data['age'].max()-data['age'].min())
data['TT4']=(data['TT4']-data['TT4'].min())/(data['TT4'].max()-data['TT4'].min())
data['T4U']=(data['T4U']-data['T4U'].min())/(data['T4U'].max()-data['T4U'].min())
data['FTI']=(data['FTI']-data['FTI'].min())/(data['FTI'].max()-data['FTI'].min())

data.head()

y=data['binaryClass']
x=data.drop(['binaryClass'],axis=1)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest= train_test_split(x,y,test_size=0.1,stratify=y)
print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

from xgboost import XGBClassifier
svm_model=XGBClassifier()
svm_model.fit(xtrain,ytrain)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
predictions= svm_model.predict(xtest)
percentage=svm_model.score(xtest,ytest)
res=confusion_matrix(ytest,predictions)
print("validation confusion matrix")
print(res)
print(classification_report(ytest, predictions))
# check the accuracy on the training set
print('training accuracy = '+str(svm_model.score(xtrain, ytrain)*100))
print('testing accuracy = '+str(svm_model.score(xtest, ytest)*100))

import matplotlib.pyplot as plt
import seaborn as sns
sns.countplot(x='binaryClass',data=data)
plt.title("Countplot for Target variable");

"""Since the model has performed well on the test set, it doesnt require any hyperparameter tuning."""